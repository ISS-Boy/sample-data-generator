/*
 * Copyright 2014 Open mHealth
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.openmhealth.data.generator.domain;

import javax.validation.constraints.NotNull;

import java.util.Comparator;
import java.util.List;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;


/**
 * A trend wraps a {@link BoundedRandomVariable} in order to provide values whose mean falls along a linear
 * interpolation from a start value to an end value.
 *
 * @author Emerson Farrugia
 */
// TODO refactor this into a container object that wraps a variable and a trend, allowing different variables and
// trend types (linear, polynomial, spline, etc.) with multiple sample points instead of just start and end
public class BoundedRandomVariableContainer {

    private BoundedRandomVariable variable = new BoundedRandomVariable();
    private List<DataTrend> trends;


    public BoundedRandomVariableContainer() {
    }

    public BoundedRandomVariableContainer(BoundedRandomVariable variable, List<DataTrend> trends) {
        checkNotNull(variable);
        checkNotNull(trends);

        this.variable = variable;
        this.trends = trends;
    }


    @NotNull
    public BoundedRandomVariable getVariable() {
        return variable;
    }

    public void setVariable(BoundedRandomVariable variable) {

        checkNotNull(variable);
        this.variable = variable;
    }


    @NotNull
    public List<DataTrend> getTrends() {
        return trends;
    }

    public void setTrends(List<DataTrend> trends){
        this.trends = trends;
    }


    /**
     * @param mean to calculate next Value,which obey the N(mean,variance) distribution
     * @return a value generated by the bounded random variable when its mean is set to the value of the trend at the
     * given fraction
     */
    public Double nextValue(Double mean) {
        return variable.nextValue(mean);
    }

    // TODO remove these setters on a refactor, currently needed by SnakeYaml to support flat structure
    public void setStandardDeviation(Double standardDeviation) {
        variable.setStandardDeviation(standardDeviation);
    }

    public void setMinimumValue(Double minimumValue) {
        variable.setMinimumValue(minimumValue);
    }

    public void setMaximumValue(Double maximumValue) {
        variable.setMaximumValue(maximumValue);
    }


    @Override
    public String toString() {

        final StringBuilder sb = new StringBuilder("BoundedRandomVariableContainer{");

        sb.append("variable=").append(variable);
        sb.append("Trend=").append(trends);
        sb.append('}');

        return sb.toString();
    }
}

